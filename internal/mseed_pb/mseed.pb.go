// Code generated by protoc-gen-go.
// source: mseed.proto
// DO NOT EDIT!

/*
Package mseed_pb is a generated protocol buffer package.

It is generated from these files:
	mseed.proto

It has these top-level messages:
	Index
	Record
	Timestamp
*/
package mseed_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Index struct {
	Path    string    `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Records []*Record `protobuf:"bytes,7,rep,name=records" json:"records,omitempty"`
}

func (m *Index) Reset()                    { *m = Index{} }
func (m *Index) String() string            { return proto.CompactTextString(m) }
func (*Index) ProtoMessage()               {}
func (*Index) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Index) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Index) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type Record struct {
	Start  *Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End    *Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	Number int64      `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetStart() *Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Record) GetEnd() *Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Record) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// Timestamp for encoding time stamps.
type Timestamp struct {
	// Unix time in nanoseconds.
	UnixNano int64 `protobuf:"varint,2,opt,name=unix_nano,json=unixNano" json:"unix_nano,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Timestamp) GetUnixNano() int64 {
	if m != nil {
		return m.UnixNano
	}
	return 0
}

func init() {
	proto.RegisterType((*Index)(nil), "mseed.Index")
	proto.RegisterType((*Record)(nil), "mseed.Record")
	proto.RegisterType((*Timestamp)(nil), "mseed.Timestamp")
}

func init() { proto.RegisterFile("mseed.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x8f, 0x3d, 0x4b, 0xc6, 0x30,
	0x14, 0x85, 0xa9, 0xb1, 0x5f, 0xb7, 0x08, 0x72, 0x07, 0x09, 0xb8, 0x94, 0x0c, 0x9a, 0xa9, 0x43,
	0xfd, 0x07, 0xe2, 0xe2, 0xe2, 0x10, 0x9c, 0x5c, 0x4a, 0x6a, 0x02, 0x16, 0xcc, 0x07, 0x49, 0x0a,
	0xfd, 0xf9, 0xd2, 0xb4, 0xbe, 0xdb, 0xbb, 0xe5, 0x9c, 0xe7, 0xe4, 0x81, 0x0b, 0x9d, 0x89, 0x5a,
	0xab, 0xc1, 0x07, 0x97, 0x1c, 0x96, 0x39, 0xb0, 0x37, 0x28, 0xdf, 0xad, 0xd2, 0x1b, 0x22, 0xdc,
	0x7a, 0x99, 0x7e, 0x68, 0xd1, 0x17, 0xbc, 0x15, 0xf9, 0x8d, 0xcf, 0x50, 0x07, 0xfd, 0xed, 0x82,
	0x8a, 0xb4, 0xee, 0x09, 0xef, 0xc6, 0xbb, 0xe1, 0x50, 0x88, 0xdc, 0x8a, 0x7f, 0xca, 0x7e, 0xa1,
	0x3a, 0x2a, 0x7c, 0x82, 0x32, 0x26, 0x19, 0x52, 0xf6, 0x74, 0xe3, 0xfd, 0xf9, 0xe1, 0x73, 0x31,
	0x3a, 0x26, 0x69, 0xbc, 0x38, 0x30, 0x32, 0x20, 0xda, 0x2a, 0x7a, 0x73, 0x65, 0xb5, 0x43, 0x7c,
	0x80, 0xca, 0xae, 0x66, 0xd6, 0x81, 0x92, 0xbe, 0xe0, 0x44, 0x9c, 0x89, 0x71, 0x68, 0x2f, 0x4b,
	0x7c, 0x84, 0x76, 0xb5, 0xcb, 0x36, 0x59, 0x69, 0x5d, 0xd6, 0x11, 0xd1, 0xec, 0xc5, 0x87, 0xb4,
	0xee, 0x15, 0xbe, 0x9a, 0x6c, 0x9e, 0xfc, 0x3c, 0x57, 0xf9, 0xee, 0x97, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x75, 0xbb, 0x2c, 0xd3, 0x06, 0x01, 0x00, 0x00,
}
